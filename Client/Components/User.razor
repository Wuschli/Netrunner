@using Netrunner.Shared.Users
@using Netrunner.Shared.Chat
@using Netrunner.Client.Services
@using Netrunner.Shared.Services
@inject IServiceHelper _serviceHelper

<div>
    <p>
        <em>@Name</em>(@_profile?.Id)
    </p>
    @if (_isContact)
    {
        <button @onclick="HandleRemoveContact">Remove Contact</button>
    }
    @if (_rooms != null)
    {
        <div>
            <h5>Invite</h5>
            @foreach (var room in _rooms)
            {
                <button @onclick="() => HandleInvite(room.Id)">@room.Name</button>
            }
        </div>
    }
</div>

@code {
#nullable enable

    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public EventCallback OnUpdate { get; set; }

    private UserProfile? _profile;
    private bool _isContact;
    private IEnumerable<ChatRoom>? _rooms;

    protected override async Task OnParametersSetAsync()
    {
        var contactService = await _serviceHelper.GetService<IContactService>();
        var profileService = await _serviceHelper.GetService<IUserProfileService>();
        var chatService = await _serviceHelper.GetService<IChatService>();

        var contacts = await contactService.GetContacts();
        _isContact = contacts?.Any(c => c.Username.Equals(Name)) ?? false;

        if (Name != null)
            _profile = await profileService.GetUserProfile(Name);
        if (_profile == null)
            return;

        var rooms = await chatService.GetRooms();
        _rooms = rooms?.Where(room => !room.Members.Contains(_profile.Id));
    }

    //TODO load profile on hover or something

    private async Task HandleRemoveContact()
    {
        if (Name == null)
            return;
        var contactService = await _serviceHelper.GetService<IContactService>();
        await contactService.RemoveContact(Name);
        await OnUpdate.InvokeAsync();
    }

    private async Task HandleInvite(string roomId)
    {
        if (Name == null)
            return;
        var chatService = await _serviceHelper.GetService<IChatService>();
        await chatService.InviteUserToRoom(roomId, Name);
    }

}