@using Netrunner.Shared.Identity
@using Netrunner.Client.Services
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<h3>Register</h3>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="registration" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div class="form-group">
                <label for="userName">User Name</label>
                <InputText Id="userName" Class="form-control" @bind-Value="registration.UserName"/>
                <ValidationMessage For="@(() => registration.UserName)"/>
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" Class="form-control" @bind-Value="registration.Password"/>
                <ValidationMessage For="@(() => registration.Password)"/>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>

@code {
    private RegistrationRequest registration = new RegistrationRequest();
    private bool ShowErrors;
    private string Error = "";

    private async Task HandleRegistration()
    {
        ShowErrors = false;
        var result = await AuthService.Register(registration);
        if (result.Successful)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Error = result.Error;
            ShowErrors = true;
        }
    }

}