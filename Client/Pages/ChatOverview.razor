@page "/chat/{roomId?}"
@using Netrunner.Shared.Chat
@using Netrunner.Client.Services
@using Netrunner.Shared.Services
@inject IServiceHelper _serviceHelper

@if (!string.IsNullOrWhiteSpace(RoomId))
{
    <Chat RoomId=@RoomId/>
}
else
{
    @if (_invites != null)
    {
        <h5>Invitations</h5>
        <ul>
            @foreach (var roomId in _invites)
            {
                <li>
                    <button @onclick="() => HandleJoin(roomId)">Join @roomId</button>
                </li>
            }
        </ul>
    }

    <Rooms @ref="RoomsComponent"/>

    <form @onsubmit="HandleCreateRoom">
        <div class="form-group">
            <label>
                Name:
                <input @bind="_newRoomInput" size="50"/>
            </label>
        </div>
        <button>Create Room</button>
    </form>
}

@code
{
#nullable enable
    [Parameter]
    public string? RoomId { get; set; }

    protected Rooms? RoomsComponent;

    private string? _newRoomInput;
    private IEnumerable<string>? _invites;

    protected override async Task OnInitializedAsync()
    {
        var chatService = await _serviceHelper.GetService<IChatService>();
        _invites = await chatService.GetInvites();
    }

    private async Task HandleCreateRoom()
    {
        if (string.IsNullOrEmpty(_newRoomInput))
            return;
        var chatService = await _serviceHelper.GetService<IChatService>();
        await chatService.CreateRoom(new CreateChatRoom
        {
            Name = _newRoomInput
        });
        _newRoomInput = null;

        if (RoomsComponent != null)
            await RoomsComponent.Refresh();
    }

    private async Task HandleJoin(string roomId)
    {
        var chatService = await _serviceHelper.GetService<IChatService>();
        await chatService.JoinRoom(roomId);

        if (RoomsComponent != null)
            await RoomsComponent.Refresh();
    }

}